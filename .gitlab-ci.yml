# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:22-alpine

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

stages:
  - test
  - analyse
  - build
  - deploy

test:
  stage: test
  tags:
    - oceb
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-9 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - echo "/.pnpm-store" >> .prettierignore
    - pnpm exec prettier --check .
    - pnpm run test:unit:ci
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - node_modules/
      - .pnpm-store/

sast:
  stage: analyse
  when: manual
  tags:
    - oceb

include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  tags:
    - oceb
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-9 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - apk add git
    - cp .env.testing_raspberry_pi .env
    - pnpm run build
    - mv dist/spa dist/spa_raspberry_pi
    - cp .env.testing_variscite_newtcam .env
    - pnpm run build
    - mv dist/spa dist/spa_variscite_newtcam
  artifacts:
    paths:
      - dist/
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - node_modules/
      - .pnpm-store/

deploy-raspberry-pi:
  stage: deploy
  tags:
    - oceb
  environment:
    name: Raspberry Pi testing
    url: http://$RASPBERRY_PI_HOST
  script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || ( apk update && apk add openssh-client )'

    ## Run ssh-agent (inside the build environment).
    - eval $(ssh-agent -s)

    ## Add the SSH key variable to the agent store. We're using tr to fix line
    ## endings which makes ed25519 keys work without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$RASPBERRY_PI_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $RASPBERRY_PI_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Deploy.
    - ssh $APP4CAM_USER@$RASPBERRY_PI_HOST "rm --force --recursive /var/www/html/* && exit"
    - apk add rsync
    - rsync --recursive dist/spa_raspberry_pi/ $APP4CAM_USER@$RASPBERRY_PI_HOST:/var/www/html

deploy-variscite-newtcam:
  stage: deploy
  tags:
    - oceb
  environment:
    name: Variscite NEWTCAM 3 testing
    url: http://$VARISCITE_NEWTCAM_HOST
  script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || ( apk update && apk add openssh-client )'

    ## Run ssh-agent (inside the build environment).
    - eval $(ssh-agent -s)

    ## Add the SSH key variable to the agent store. We're using tr to fix line
    ## endings which makes ed25519 keys work without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$VARISCITE_NEWTCAM_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $VARISCITE_NEWTCAM_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Deploy.
    - ssh $APP4CAM_USER@$VARISCITE_NEWTCAM_HOST "rm --force --recursive /var/www/html/* && exit"
    - apk add rsync
    - rsync --recursive dist/spa_variscite_newtcam/ $APP4CAM_USER@$VARISCITE_NEWTCAM_HOST:/var/www/html
